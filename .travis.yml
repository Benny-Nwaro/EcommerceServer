sudo: required
services:
  - docker

before_install:
  - docker build -t benaroh30/server -f Dockerfile.dev .

# Install a compatible Python version and set CLOUDSDK_PYTHON variable
before_script:
  # Suppress any prompts or messages during Python installation
  - export PYTHON_CONFIGURE_OPTS="--enable-optimizations"
  - pyenv install -s 3.9.0  # Install Python 3.9 without prompts
  - pyenv global 3.9.0
  - python --version  # Verify the version
  - export CLOUDSDK_PYTHON=$(pyenv which python)  # Set the gcloud SDK to use the installed Python

script:
  - docker run benaroh30/server npm test -- --coverage

after_success:
  - openssl enc -aes256 -d -in serviceAccount.json.enc -out serviceAccount.json -k $SERVICE_KEY

  # Install GCP SDK and update to the latest version without prompts
  - if [ -d "$HOME/google-cloud-sdk" ]; then rm -rf $HOME/google-cloud-sdk; 
  - export CLOUDSDK_CORE_DISABLE_PROMPTS=1
  - curl https://sdk.cloud.google.com | bash; fi
  - source /home/travis/google-cloud-sdk/path.bash.inc
  # - gcloud components update --quiet

  # Authenticate using the service account and set the active account
  - gcloud auth activate-service-account --key-file serviceAccount.json 

  # - gcloud config set account $(gcloud auth list --filter=status:ACTIVE --format="value(account)")

  # Set the GCP project and zone
 

  - gcloud config set compute/zone us-west2-a

  # Deploy to Google Cloud
  - gcloud app deploy 

  # Decrypt environment variables
  - openssl enc -aes256 -d -in .enc -out .env -k $SECRET_KEY

  # Build production docker image
  - docker build -t benaroh30/server .
  - echo "$Docker_password" | docker login --username "$Docker_id" --password-stdin
  - docker push benaroh30/server
  - bash ./deploy.sh
